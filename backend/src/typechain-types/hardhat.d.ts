/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAccount__factory>;
    getContractFactory(
      name: "EntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EntryPoint__factory>;
    getContractFactory(
      name: "NonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonceManager__factory>;
    getContractFactory(
      name: "SenderCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SenderCreator__factory>;
    getContractFactory(
      name: "StakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeManager__factory>;
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregator__factory>;
    getContractFactory(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPoint__factory>;
    getContractFactory(
      name: "INonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonceManager__factory>;
    getContractFactory(
      name: "IPaymaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymaster__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "DimeEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DimeEntryPoint__factory>;
    getContractFactory(
      name: "IElasticSignature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IElasticSignature__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "BaseWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseWallet__factory>;
    getContractFactory(
      name: "DefaultWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultWallet__factory>;
    getContractFactory(
      name: "EcdsaWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EcdsaWallet__factory>;
    getContractFactory(
      name: "ImplFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImplFactory__factory>;
    getContractFactory(
      name: "Groth16Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Groth16Verifier__factory>;
    getContractFactory(
      name: "ZkEllasticWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkEllasticWallet__factory>;

    getContractAt(
      name: "BaseAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAccount>;
    getContractAt(
      name: "EntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EntryPoint>;
    getContractAt(
      name: "NonceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonceManager>;
    getContractAt(
      name: "SenderCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SenderCreator>;
    getContractAt(
      name: "StakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeManager>;
    getContractAt(
      name: "IAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregator>;
    getContractAt(
      name: "IEntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPoint>;
    getContractAt(
      name: "INonceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INonceManager>;
    getContractAt(
      name: "IPaymaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymaster>;
    getContractAt(
      name: "IStakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "DimeEntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DimeEntryPoint>;
    getContractAt(
      name: "IElasticSignature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IElasticSignature>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "BaseWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseWallet>;
    getContractAt(
      name: "DefaultWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultWallet>;
    getContractAt(
      name: "EcdsaWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EcdsaWallet>;
    getContractAt(
      name: "ImplFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImplFactory>;
    getContractAt(
      name: "Groth16Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Groth16Verifier>;
    getContractAt(
      name: "ZkEllasticWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkEllasticWallet>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
