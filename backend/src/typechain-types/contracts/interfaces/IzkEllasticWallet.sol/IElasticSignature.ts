/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IElasticSignatureInterface extends utils.Interface {
  functions: {
    "resetPassword(uint256[8],uint256,uint256,uint256[8],uint256,uint256,uint256)": FunctionFragment;
    "verify(address,uint256[8],uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "resetPassword" | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "resetPassword",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "resetPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "SetPassword(address,uint256)": EventFragment;
    "Verified(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetPassword"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Verified"): EventFragment;
}

export interface SetPasswordEventObject {
  user: string;
  pwdhash: BigNumber;
}
export type SetPasswordEvent = TypedEvent<
  [string, BigNumber],
  SetPasswordEventObject
>;

export type SetPasswordEventFilter = TypedEventFilter<SetPasswordEvent>;

export interface VerifiedEventObject {
  user: string;
  nonce: BigNumber;
}
export type VerifiedEvent = TypedEvent<
  [string, BigNumber],
  VerifiedEventObject
>;

export type VerifiedEventFilter = TypedEventFilter<VerifiedEvent>;

export interface IElasticSignature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IElasticSignatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    resetPassword(
      proof1: PromiseOrValue<BigNumberish>[],
      expiration1: PromiseOrValue<BigNumberish>,
      allhash1: PromiseOrValue<BigNumberish>,
      proof2: PromiseOrValue<BigNumberish>[],
      pwdhash2: PromiseOrValue<BigNumberish>,
      expiration2: PromiseOrValue<BigNumberish>,
      allhash2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify(
      user: PromiseOrValue<string>,
      proof: PromiseOrValue<BigNumberish>[],
      datahash: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      allhash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  resetPassword(
    proof1: PromiseOrValue<BigNumberish>[],
    expiration1: PromiseOrValue<BigNumberish>,
    allhash1: PromiseOrValue<BigNumberish>,
    proof2: PromiseOrValue<BigNumberish>[],
    pwdhash2: PromiseOrValue<BigNumberish>,
    expiration2: PromiseOrValue<BigNumberish>,
    allhash2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify(
    user: PromiseOrValue<string>,
    proof: PromiseOrValue<BigNumberish>[],
    datahash: PromiseOrValue<BigNumberish>,
    expiration: PromiseOrValue<BigNumberish>,
    allhash: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    resetPassword(
      proof1: PromiseOrValue<BigNumberish>[],
      expiration1: PromiseOrValue<BigNumberish>,
      allhash1: PromiseOrValue<BigNumberish>,
      proof2: PromiseOrValue<BigNumberish>[],
      pwdhash2: PromiseOrValue<BigNumberish>,
      expiration2: PromiseOrValue<BigNumberish>,
      allhash2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      user: PromiseOrValue<string>,
      proof: PromiseOrValue<BigNumberish>[],
      datahash: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      allhash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "SetPassword(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      pwdhash?: PromiseOrValue<BigNumberish> | null
    ): SetPasswordEventFilter;
    SetPassword(
      user?: PromiseOrValue<string> | null,
      pwdhash?: PromiseOrValue<BigNumberish> | null
    ): SetPasswordEventFilter;

    "Verified(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null
    ): VerifiedEventFilter;
    Verified(
      user?: PromiseOrValue<string> | null,
      nonce?: PromiseOrValue<BigNumberish> | null
    ): VerifiedEventFilter;
  };

  estimateGas: {
    resetPassword(
      proof1: PromiseOrValue<BigNumberish>[],
      expiration1: PromiseOrValue<BigNumberish>,
      allhash1: PromiseOrValue<BigNumberish>,
      proof2: PromiseOrValue<BigNumberish>[],
      pwdhash2: PromiseOrValue<BigNumberish>,
      expiration2: PromiseOrValue<BigNumberish>,
      allhash2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify(
      user: PromiseOrValue<string>,
      proof: PromiseOrValue<BigNumberish>[],
      datahash: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      allhash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    resetPassword(
      proof1: PromiseOrValue<BigNumberish>[],
      expiration1: PromiseOrValue<BigNumberish>,
      allhash1: PromiseOrValue<BigNumberish>,
      proof2: PromiseOrValue<BigNumberish>[],
      pwdhash2: PromiseOrValue<BigNumberish>,
      expiration2: PromiseOrValue<BigNumberish>,
      allhash2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      user: PromiseOrValue<string>,
      proof: PromiseOrValue<BigNumberish>[],
      datahash: PromiseOrValue<BigNumberish>,
      expiration: PromiseOrValue<BigNumberish>,
      allhash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
